#ifndef __GAMEOBJECTS_H__
#define __GAMEOBJECTS_H__

class GameObject {
private:
public:
	GameEntity *GE;
	// визуальная часть
	int Image,		// число, указывающее на нужный набор спрайтов для отображения объекта
		Animation,  // номер проигрываемой анимации
		ClipNum;
	// игровая часть
	int Health,     // оставшаяся прочность объекта
		x,			// координата Х объекта
		y;			// координата Y объекта
	double xVelocity, yVelocity,		// скорость перемещения объекта по осям X и Y
		AccelX, AccelY,					// ускорение объекта по осям X и Y, 
		VelocityMax;					// предел скорости перемещения по любой из осей
	// свойства 
	bool temporary;		// объект является временным спецэффектом
	//---------- Функции --------------------
	GameObject();
	GameObject(int DataImageNumber, int PosX, int PosY, int hp, void *link);	// базовый конструктор
	void Refresh();													// обновляет объект на экране, прорисовывает его
	void SetAnimation(int anim);									// перемещает анимацию на указанный кадр
	void Move();													// заставляет объект перемещаться вперёд со скоростью и ускорением
};


//==============================================================================================================

class ProjectileType {
private:
	int Damage;																		// величина наносимого снарядом урона
	double VelocityX, VelocityY;													// скорость движения снаряда по осям X/Y
	double AccelerationX, AccelerationY;											// ускорение снаряда по осям X/Y
public:
	void (*OnHit)(int TargetId, int ProjectileId);								//	ссылка на функцию, обрабатывающую столкновение с данным типом снаряда
	ProjectileType(int dmg, double velx, double vely, double accx, double accy);	// конструктор
};

//==============================================================================================================

class Unit: public GameObject {
private:
	int CurrentCooldown;			// текущее состояние таймера перезарядки
public:
	int Charge,						// степень зарядки супер-способности
		Cooldown,					// время перезарядки выстрела юнита
		Id;							// идентификатор юнита
	ProjectileType *BulletType;		// ссылка на тип снаряда юнита
	bool IsEnemy;					// параметр, указывающий на принадлежность юнита к оппонентам
	

	// функции
	Unit(int DataImageNumber, int PosX, int PosY, int hp, int BltType, void *link);		// конструктор
	void Shoot();					// функция, осуществляющая создание нового снаряда перед юнитом и запускающая перезарядку
	void Kill();					// функция, обрабатывающее убийство юнита, как управляемого игроком, так и врагом
	void Remove();					// удаляет юнита из игры, не обрабатывая это как уничтожение (вышел за пределы экрана)
	void Damage(int value);			// функция, обрабатывающая получение юнитом урона

	// паттерн движения
	int (*Pattern)(void *data);		// функция, которая осуществляет предписанное движение юнита
	SDL_Thread *PatternThread;		// поток, в котором выполняется последовательность движений в паттерне
};

//==============================================================================================================

class Projectile: public GameObject {
private:
	double angle;		// угол, под которым перемещается снаряд
	int Id;				// идентификатор снаряда
public:
	Projectile(ProjectileType *type, int PosX, int PosY, double ang); // конструктор
	void Fly();			// функция, осуществляющая перемещение снаряда вперёд и обработку связанных с этим событий
	void Kill();		// функция, обрабатывающая смерть снаряда
};

//==============================================================================================================

#endif

